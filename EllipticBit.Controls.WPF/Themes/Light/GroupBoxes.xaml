<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


	<ResourceDictionary.MergedDictionaries>
	    <ResourceDictionary Source="pack://application:,,,/EllipticBit.Controls.WPF;component/Themes/Light/Defaults.xaml"/>
	    <ResourceDictionary Source="pack://application:,,,/EllipticBit.Controls.WPF;component/Themes/Light/Buttons.xaml"/>
	</ResourceDictionary.MergedDictionaries>

	<Style x:Key="ComboBoxButtonStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="BorderBrush" Value="{StaticResource FieldBorderColor}" />
		<Setter Property="Background" Value="{StaticResource ButtonBackgroundColor}" />
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="FontSize" Value="{StaticResource DefaultFontSize}" />
		<Setter Property="BorderThickness" Value="{StaticResource ComboBoxButtonBorderThickness}" />
		<Setter Property="UseLayoutRounding" Value="true"/>
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border x:Name="Border" CornerRadius="{StaticResource ComboBoxButtonCornerRadiusRight}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
						<Path x:Name="Arrow" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{StaticResource ArrowGeometry}" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="True" >
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonMouseOverColor}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True" >
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonMouseOverColor}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="True" >
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ToggleButtonCheckedColor}" />
						</Trigger>
						<Trigger Property="IsPressed" Value="True" >
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonPressedColor}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False" >
							<Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource ButtonDisabledBorderColor}" />
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ButtonDisabledColor}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ComboBoxItemTemplate" TargetType="{x:Type ComboBoxItem}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Padding" Value="3" />
		<Setter Property="MinHeight" Value="25" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
						<ContentPresenter Content="{TemplateBinding Content}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{StaticResource DropDownMouseOverColor}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="False" />
								<Condition Property="IsSelected" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{StaticResource DefaultSelectionColor}" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{StaticResource DefaultFontColor}" />
		<Setter Property="FontFamily" Value="{StaticResource DefaultFontFamily}" />
		<Setter Property="FontWeight" Value="{StaticResource DefaultFontWeight}" />
		<Setter Property="Background" Value="{StaticResource FieldBackgroundColor}"/>
		<Setter Property="BorderBrush" Value="{StaticResource FieldBorderColor}"/>
		<Setter Property="BorderThickness" Value="{StaticResource FieldBorderThickness}" />
		<Setter Property="MinHeight" Value="30"/>
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="Padding" Value="4,3"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
		<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
		<Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemTemplate}" />
		<Setter Property="UseLayoutRounding" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid>
						<Border Name="BG" Margin="{StaticResource FieldBorderMargin}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{StaticResource FieldCornerRadius}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
							<Grid x:Name="MainGrid" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="24"/>
								</Grid.ColumnDefinitions>
								<Popup PlacementTarget="{Binding ElementName=BG}" x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" IsOpen="{TemplateBinding IsDropDownOpen}" Margin="0" Placement="Bottom" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
									<Border x:Name="DropDownBorder" Width="{Binding ElementName=BG, Path=ActualWidth}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Background="{StaticResource DropDownBackgroundColor}" CornerRadius="{StaticResource ComboBoxDropDownCornerRadius}" HorizontalAlignment="Stretch" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
										<ScrollViewer x:Name="DropDownScrollViewer" HorizontalAlignment="Stretch" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" Foreground="{TemplateBinding Foreground}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" >
											<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
										</ScrollViewer>
									</Border>
								</Popup>
								<ToggleButton Name="Toggle" Grid.Column="1" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding IsEnabled}" Style="{StaticResource ComboBoxButtonStyle}" Foreground="{TemplateBinding Foreground}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>
								<ContentPresenter Grid.Column="0" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Grid>
						</Border>
						<Border x:Name="FocusedOverlay" Visibility="Collapsed" BorderBrush="{StaticResource FieldSelectedBorderOverlayColor}" BorderThickness="{StaticResource FieldSelectedBorderOverlayThickness}" CornerRadius="{StaticResource FieldCornerRadius}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasItems" Value="false">
							<Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{StaticResource DisabledFontColor}"/>
							<Setter Property="Background" Value="{StaticResource FieldDisabledColor}"/>
							<Setter Property="BorderBrush" Value="{StaticResource FieldDisabledBorderColor}"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
						</Trigger>
						<Trigger Property="IsDropDownOpen" Value="True">
							<Setter TargetName="FocusedOverlay" Property="Visibility" Value="Visible"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocused" Value="True"/>
								<Condition Property="IsEnabled" Value="True"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter TargetName="FocusedOverlay" Property="Visibility" Value="Visible"/>
							</MultiTrigger.Setters>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsFocused" Value="True"/>
								<Condition Property="IsEnabled" Value="True"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter TargetName="FocusedOverlay" Property="Visibility" Value="Visible"/>
							</MultiTrigger.Setters>
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>